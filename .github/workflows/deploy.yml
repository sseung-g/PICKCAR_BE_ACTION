#워크플로우 이름
name: CI/CD Build & Deploy to EC2 (Local Docker build on EC2)

#main branch로 push하면 실행
on:
  push:
    branches:
      - main

#배포 작업 정의
jobs:
  #ubuntu VM에서 실행
  deploy:
    runs-on: ubuntu-latest


    steps:
      #현재 레포지토리 코드를 내려받음
      - name: Checkout code
        uses: actions/checkout@v4

      #EC2에 접근할 SSH 키를 Github Actions에 등록
      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.EC2_ACTIONS_SSH_KEY }}

      ### 3. gradlew 실행 권한 부여
      - name: Grant execute permission to gradlew
        run: chmod +x ./gradlew

      ### 4. 🏗️ 프로젝트 빌드
      - name: Build with Gradle
        run: ./gradlew clean build

      #현재 디렉토리 전체를 EC2로 복사 (TODO : 추후 변경된 파일만 push되도록 수정 필요)
      - name: Copy project source code to EC2 (excluding .git, .github)
        run: |
          rsync -avz --exclude='.git' --exclude='.github' -e "ssh -o StrictHostKeyChecking=no" ./ \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/ubuntu/PICKCAR_BE_ACTION

      #.env 파일을 EC2 서버 내에 직접 생성
      - name: Create .env file on EC2
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          port: ${{ secrets.EC2_PORT }}
          key: ${{ secrets.EC2_ACTIONS_SSH_KEY }}
          script: |
            cd /home/ubuntu/PICKCAR_BE_ACTION
            cat > .env <<EOL
            MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
            DEV_DB_NAME=${{ secrets.DEV_DB_NAME }}
            DEV_DB_USERNAME=${{ secrets.DEV_DB_USERNAME }}
            DEV_DB_PASSWORD=${{ secrets.DEV_DB_PASSWORD }}
            EOL

      #도커 컴포즈 배포(전체 빌드 + 실행)
      #기존 컨테이너 중지 -> 이미지 빌드 -> 컨테이너 재실행
      - name: Deploy on EC2 (Local Docker Compose build)
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          port: ${{ secrets.EC2_PORT }}
          key: ${{ secrets.EC2_ACTIONS_SSH_KEY }}
          script: |
            set -e
            cd /home/ubuntu/PICKCAR_BE_ACTION/domain/src/main/resources
            rm -f application-dev.yml
            cp application-dev.default application-dev.yml
            echo "application-dev.yml 파일이 생성되었습니다."
            
            echo "도커에 up 시작"
            cd /home/ubuntu/PICKCAR_BE_ACTION
            sudo docker-compose down
            sudo docker container prune -af
            sudo docker-compose build --no-cache
            sudo docker-compose up -d